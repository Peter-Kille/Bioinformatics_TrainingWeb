---
title-block-style: default
title-block-banner: darkred
title-block-banner-color: white
title: "Genome Visualisation and Annotation"
subtitle: "Layering information onto your sequences"
author: "Prof. Peter Kille and Dr. Sarah Christofides"
date: today
affiliation: "Cardiff University"
---

```{r include=FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

<iframe data-external="1" src="https://cardiff.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=35fe879e-58e9-4141-a49a-af630098dee1&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=true&amp;captions=false&amp;interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay">

</iframe>

## Data

The data you will need for this exercise are:

1)  example genbank or embl files
2)  fastq file (pair end or single end data)
3)  fasta file representing assembly of data from (1)

# Visualising genomes using Artemis

[Artemis](https://www.sanger.ac.uk/tool/artemis/) is a rather old but very elegant genome visualisation tool. To get you used to using it, we will try it out using an example genome that's already been annotated.

***Artemis can be installed locally [local install instructions](http://sanger-pathogens.github.io/Artemis/). Warning: this can take time, so please do not do it during teaching session.***

::: {.callout-note collapse="true"}
## Artemis Mac Install

Additional Sanger Centre training material can be downloaded using the following link - [Sanger center training](https://tinyurl.com/4dzbj9nk)

1.  download latest version of Artemis from https://github.com/sanger-pathogens/Artemis/releases/download/v18.2.0/artemis-macosx-release-18.2.0.dmg.gz

2.  download java from Latest Releases - must be jdk v11 or above, from [TechSpot](https://www.techspot.com/downloads/7407-java-se-16.html) or [Adoptium](https://adoptium.net/en-GB/temurin/releases/?version=16&os=mac&arch=x64&package=jdk)

3.  unpack Artemis - and move the files to a folder somewhere ... i.e to an Artemis directory you've made somewhere.

4.  find out what version of java is currently on your system

```{bash}
java -version
```

or you can see the java versions you have available using

```{bash}
/usr/libexec/java_home -V
```

5.  then depending on your shell - edit the relevant rc file

```{bash}
nano ~/.zshrc
```

and add a line .... change the -v1.8 to -vXX depending on the version of java you have as default.

```{bash}
export JAVA_HOME=$(/usr/libexec/java_home - v1.8)
```

6.  now install the version of java you have just downloaded - this will install and make the default java change to this version. You should also see a new line appear when you run this command.

```{bbash}
/usr/libexec/java_home -V
```

7.  now run Artemis - use terminal to change to the directory you put the apps in in step 3

```{bash}
cd ~/Artemis/
Artemis.app/Contents/art
```

-   will run Artemis - or alternatively you should be able to click on the icons in finder to run.

-   If there is a security issue - go ... File -- System Settings -- Privacy & Security .. and then look for a statement that says "Artemis" was blocked from use because it is not from an identified developer .... and click Open Anyway - you need to have admin/sudo privileges to do this.

-   Artemis should run

8.  the next time you log into your mac - the default java will be the default one and not the one required to use Artemis ... so to the terminal and type (change -v flag depending on jvm version)

```{bash}
export JAVA_HOME=$(/usr/libexec/java_home -v16)
```

-   and now you should be able to run Artemis again

-   if you want to keep use this java as default - edit your .zshrc file

-   if you don't want to type in that command all the time, add this to your .zshrc file

```{bash}
alias javaart='export JAVA_HOME=$(/usr/libexec/java_home -v16)'
```

-   and then type `javaart` into a terminal to change to the version of java required for Artemis

-   alternatively you should be able to edit the

```{bash}
Artemis.app/Contents/art
#script and add
export JAVA_HOME=$(/usr/libexec/java_home - v16)
```

-   at the top somewhere - haven't tested this to force the right version of java to be used.
:::

To use Artemis via your Linux desktop on the server, you need to enable it to use a visual interface. Open a new tab in MobaXterm and log in using the slightly modified command:

```{bash}
ssh [your username]@sponsa.bios.cf.ac.uk -X -p [your port number]
```

Use the three-word passphrase you were assigned.

The `-X` enables the graphical interface.

Now load the Artemis module and initiate Artemis with command `art`

```{bash}
module load artemis/18.2.0
art
```

Artemis Opening Screen

![](images/Artemis_Open_window.png){width="40%" fig-align="center"}

Open Genbank File

```{bash}
>File >Open
```

Navigate to your Session3 folder and select the genbank file (`NC_003428.gb`).

![](images/Select_Genbank_file.png){width="40%" fig-align="center"}

Cancel any warnings you should see the following window;

![](images/Artemis_genbank_file_wrong_codon_table.png){width="40%" fig-align="center"}

The blue highlighted area should highlight open reading frames (ORFs) and the vertical lines stop codons - notice that there are vertical line in the middle of ORFs this indicates that we are using the wrong codon table. Arrange your graphics windows so you can see the Opening window which will be hidden behind the gene display window - you should see something like this.

![](images/Art_open_window_gene_window.png){width="40%" fig-align="center"}

Now change the codon table by selecting

```{bash}
> Options > Genetic Code Tables
selecet
Vertebrate Mitochondrial
```

Your gene visualisation should now look like this

![](images/Artemis_genbank_file_correct_codon_table.png){width="40%" fig-align="center"}

## Exercises

As we look at creating are own annotation you will be able to visual the various outputs using Artemis.

I have included a range of extension exercises / guides generated by Sanger center (the people to wrote Artemis) these are included in you Session Folder under `Artemis_Sanger_Center`

# Visualising genomes using IGV

\[Integrative Genomics Viewer\](https://software.broadinstitute.org/software/igv/) can be [installed locally](https://software.broadinstitute.org/software/igv/download). Warning: this can take time, so please do not do it during teaching session.

To use IGV on your Linux desktop you will need to log in using `-X` (see instructions for Artemis).

Now load the IGV Module and initiate IGV with command `igv.sh`

```{bash}
module load module load igv/2.12.3
igv.sh
```

IVG Opening Screen

![](images/IGV_opeing_Screen.png){width="40%" fig-align="center"}

Now open the GenBank file using Genomes

```{bash}
> Genomes > Load Genome from File
```

Select GenBank file using file browser - you should see the following image

![](images/IGV_GenBank_File.png){width="40%" fig-align="center"}

## Excercise

As you generate annotations - look to see how you can overlay them into IVG and also try and visualise the whole bacterial genome and its prokka annotation.

# minimap2

## Data

1)  fastq file (pair end or single end data)
2)  fasta file representing assembly of data from (1)

## Software

(Minimap - mapping software)\[https://github.com/lh3/minimap2\]

```{bash}
module load minimap2/2.14
```

Samtools - bam/sam tools utilities (for alignment files)

```{bash}
module load samtools/1.16.1
```

## Workshop

Align sequences to your assemblies and convert to Bam file

```{bash}
minimap2 -ax sr [your contigs.fasta] [forward_read.fastq] [reverse_read.fastq] > aln.sam
samtools view -b -S aln.sam > aln.bam
samtools sort aln.bam > aln_sorted.bam
samtools index aln_sorted.bam
```

::: callout-important
## Excersise Minimap

Overlay the bam file you have generated into your assembly contig using Artemis and IGV
:::

# Prokka - bacetrial genome annotation

## Data

1)  Sequence reads and assembled genomes (contigs.fasta)

## Software

[PROKKA git hub site](https://github.com/tseemann/prokka)

```{bash}
module load prokka_mambaforge/1.14.6
```

***check installed version with `module avail`***

## Workshop

### Prokka

Summary: Prokka is a piece of software that is designed to identify genes from sequence data. It works on prokaryotes. Once it identifies genes, it creates a file including the sequence for the sample, along with a set of annotations to that sequence, which identify the locations of genes.

Basic commands / usage: To run prokka on an assembly (with an example filename of 'contigs.fa' use the command:

```{bash}
module load prokka_mambaforge/1.14.6
prokka contigs.fa
```

If you want to view the names of output files, you need to provide a name for the files and a directory where they should be saved:

Choose the names of the output files with --outdir and --prefix

```{bash}
module load prokka_mambaforge/1.14.6
prokka --outdir mydir --prefix mygenome contigs.fa
```

NOTE: Prokka defaults to analyzing Bacteria. Think about what your sample is and what translation table you should use (This is also important for Artemis!).

::: {.callout-note collapse="true"}
## Prokka for mitochondrial annotation: **Not recommended**

If you're working on mitochondria include --kingdom mito and the relevant --gcodeSome examples:

```         
1.  The Standard Code
2.  The Vertebrate Mitochondrial Code
3.  The Yeast Mitochondrial Code
4.  The Invertebrate Mitochondrial Code
5.  The Echinoderm and Flatworm Mitochondrial Code
```

A full command for mitochondrial annotation would look like this:

```{bash}
module load prokka_mambaforge/1.14.6

prokka --outdir prokka --kingdom Mitochondria --gcode 2 assembly/contigs.fasta
```
:::

## Prokka Loop

<iframe data-external="1" src="https://cardiff.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=4fb71dc3-818c-4317-ab92-af6a0141efbd&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=true&amp;captions=false&amp;interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay">

</iframe>

### BARRNAP - BASIC RAPID RIBOSOMAL RNA PREDICTOR

\[BARNAP Github\](https://github.com/tseemann/barrnap)

Summary: Barrnap predicts the location of ribosomal RNA genes in genomes. It supports bacteria (5S,23S,16S), archaea (5S,5.8S,23S,16S), metazoan mitochondria (12S,16S) and eukaryotes (5S,5.8S,28S,18S).

It takes FASTA DNA sequence as input, and write GFF3 as output. It uses the new NHMMER tool that comes with HMMER 3.1 for HMM searching in RNA:DNA style. NHMMER binaries for 64-bit Linux and Mac OS X are included and will be auto-detected. Multithreading is supported and one can expect roughly linear speed-ups with more CPUs.

Basic command Usage:

```         
module load barrnap/0.9
barrnap [options] Your_contigs.fasta > outfile.gff
Options:
--help            This help
--version         Print version and exit
--citation        Print citation for referencing barrnap
--kingdom [X]     Kingdom: arc mito euk bac (default 'bac')
--quiet           No screen output (default OFF)
--threads [N]     Number of threads/cores/CPUs to use (default '8')
--lencutoff [n.n] Proportional length threshold to label as partial (default '0.8')
--reject [n.n]    Proportional length threshold to reject prediction (default '0.5')
--evalue [n.n]    Similarity e-value cut-off (default '1e-06')
--incseq          Include FASTA input sequences in GFF3 output (default OFF)
```

::: callout-important
## Barnap exercises

### Exercise 1:Running PROKKA and checking Annotations

Take your assembled mitochondrial genome, assemble it and run Prokka to annotate the genome. When you have done your visualization introduction you can open this in Artemis.

What do you see as you move along the genome? Are there regions where genes should be that Prokka has not annotated? How would you work out if a gene should be there?

### Exercise 2: Find Ribosomal Sequences

Use barrnap to generate a GFF file predicting the position of any ribosomal sequences -- remember to customize the 'Kingdom' parameter to reflect the source of the sequence you are using.
:::

# NCBI Blast+

## Data

1)  Use the assembled contig from your last session (contigs.fasta)
2)  Blast Databases, Location:

```{bash}
    ~/classdata/REFS/blastdb/

swissprot -- uniprot protein database (Uniprot -- annotated protein database) 
mito_pro -- metazoan mitochondrial database 
16S_ribosomal_RNA 
16S ribosomal database
```

## Software

[NCBI Blast+ suite available](https://blast.ncbi.nlm.nih.gov/Blast.cgi) Don't forget to load the blast and any other modules you need!

```{bash}
module load blast-plus/2.13.0
```

## Anatomy of the BLAST command

A basic blast command states your reference database that has been constructed, your query, and an output file: `blastx –db /home/db/fish –query contigs.fasta –out contigs_blx.txt` This uses blastx to match DNA query against protein database. Targets the protein database stored at /home/db/ that's named 'fish'. Blast using contig.fasta file and puts the output in contig_blx.txt

## BLAST Programs

| Program   |          Input-Output |escription |
|-------------------|------------------:|---------------------------------:|
| blastn    | nucleotide-nucleotide |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           This program, given a DNA query, returns the most similar DNA sequences from the DNA database that the user specifies. |
| blastp    |       protein-protein |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               This program, given a protein query, returns the most similar protein sequences from the protein database that the user specifies. |
| blastx    |            nucleotide |                                                                                                                                                                                                                                                                                                                                                                                                                                               6-frame translation-protein This program compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database. |
| tblastx   |            nucleotide |                                                                                                                                                                                                                                                                      6-frame translation-nucleotide 6-frame translation This program is the slowest of the BLAST family. It translates the query nucleotide sequence in all six possible frames and compares it against the six-frame translations of a nucleotide sequence database. The purpose of tblastx is to find very distant relationships between nucleotide sequences. |
| tblastn   |    protein-nucleotide |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  6-frame translation This program compares a protein query against the all six reading frames of a nucleotide sequence database. |
| psi-blast |     position-specific | This program is used to find distant relatives of a protein. First, a list of all closely related proteins is created. These proteins are combined into a general "profile" sequence, which summarises significant features present in these sequences. A query against the protein database is then run using this profile, and a larger group of proteins is found. This larger group is used to construct another profile, and the process is repeated. By including related proteins in the search, PSI-BLAST is much more sensitive in picking up distant evolutionary relationships than a standard protein-protein BLAST. |
| megablast |    large queries seqs |                                                                                                                                                                                                                                                                                 When comparing large numbers of input sequences via the command-line BLAST, "megablast" is much faster than running BLAST multiple times. It concatenates many input sequences together to form a large sequence before searching the BLAST database, then post-analyze the search results to glean individual alignments and statistical values |

## BLAST Databases

Currently installed are:

• swissprot -- uniprot protein database (Uniprot -- annotated protein database) • mito_pro -- metazoan mitochondrial database • 16S_ribosomal_RNA -- 16S ribosomal database • hum_mt_pep -- human mitochondrial

You already have the databases you require today but for reference it is at location

```{bash}
 ~/classdata/REFS/blastdb/
```

To create blast databases use the makeblastdb. To create a new database:

```{bash}
    makeblastdb -in nucleotide_seq.fa –dbtype nucl –title my_db -out my_seq
```

## Command line options

```{bash}
-in         [input_file] 
-dbtype     [molecule_type], nucl – nucleotide or prot - protein
-title  [database_title]
-out        [database_name]
```

OTHER OPTIONS

```         
  blastn [-h] [-help] [-import_search_strategy filename]
    [-export_search_strategy filename] [-task task_name] [-db database_name]
    [-dbsize num_letters] [-gilist filename] [-seqidlist filename]
    [-negative_gilist filename] [-negative_seqidlist filename]
    [-taxids taxids] [-negative_taxids taxids] [-taxidlist filename]
    [-negative_taxidlist filename] [-entrez_query entrez_query]
    [-db_soft_mask filtering_algorithm] [-db_hard_mask filtering_algorithm]
    [-subject subject_input_file] [-subject_loc range] [-query input_file]
    [-out output_file] [-evalue evalue] [-word_size int_value]
    [-gapopen open_penalty] [-gapextend extend_penalty]
    [-perc_identity float_value] [-qcov_hsp_perc float_value]
    [-max_hsps int_value] [-xdrop_ungap float_value] [-xdrop_gap float_value]
    [-xdrop_gap_final float_value] [-searchsp int_value] [-penalty penalty]
    [-reward reward] [-no_greedy] [-min_raw_gapped_score int_value]
    [-template_type type] [-template_length int_value] [-dust DUST_options]
    [-filtering_db filtering_database]
    [-window_masker_taxid window_masker_taxid]
    [-window_masker_db window_masker_db] [-soft_masking soft_masking]
    [-ungapped] [-culling_limit int_value] [-best_hit_overhang float_value]
    [-best_hit_score_edge float_value] [-subject_besthit]
    [-window_size int_value] [-off_diagonal_range int_value]
    [-use_index boolean] [-index_name string] [-lcase_masking]
    [-query_loc range] [-strand strand] [-parse_deflines] [-outfmt format]
    [-show_gis] [-num_descriptions int_value] [-num_alignments int_value]
    [-line_length line_length] [-html] [-sorthits sort_hits]
    [-sorthsps sort_hsps] [-max_target_seqs num_sequences]
    [-num_threads int_value] [-remote] [-version]
```

::: callout-important
## Exercises: Annotate your mitochondria

Take your assembled mitochondrial genome and identify mitochondrial orthologues using blast.

1.  Perform blastx analysis of your sequence against the mitochondrial protein database. Interrogate the using 'less'.

2.  Re-run the blastx analysis with the output format parameter set to a cutomised `-outfmt 6`, which will output the data into a tablular format compatible with Artemis.

```{bash}
    blastx -query [contigs.fasta] -db ~/classdata/REFS/blastdb/hum_mt_pep -out [output.txt] -outfmt "6 qseqid sseqid pident length mismatch gapopen sstart send qstart qend evalue bitscore"
```

You can now open the fasta sequence you have used in the blast with Artemis and then overlay with the clast output file.

3.  Repeat the blastx analysis of your sequence against the mitochondrial protein database \[mito_pro\] only returning blast matches with an E value lower that 1E-10 and using all 4 threads.

4.  Repeat the blastx analysis of your sequence against the mitochondrial protein database, only returning blast matches with an E value lower that 1E-10, using all 4 threads, limiting the outputs so that you keep to 100 and putting the outputs into the tabular format compatible with Artemis.

5.  \[Extension\] Produce a loop to annotate all assembled contigs using blast

6.  \[Extension\] You can try repeating this exercise with swisprot and note the differences
:::

::: callout-warning
## Extension Work

For your two datasets: mitochondrial and prokaryote attempt the following process.

1.  Annotate your genomes using a loop
:::

::: {.callout-note collapse="true"}
## Worked Example - Prokayote: annotation loop

<iframe data-external="1" src="https://cardiff.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=df930bd2-5f91-4151-9866-b09500b7390c&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=true&amp;captions=false&amp;interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player">

</iframe>
:::
